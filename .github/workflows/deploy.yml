name: CI/CD to Server

on:
  push:
    branches: [master]

jobs:
  build-push:
    if:  github.ref_name == 'master' 
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3


      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true


      - name: Build and Push Docker image scheduler
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.scheduler
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/svs-parser-scheduler:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/svs-parser-scheduler:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/svs-parser-scheduler:buildcache,mode=max



  deploy:
    runs-on: ubuntu-latest
    needs: build-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Determine Deployment Path and Tag
        run: |
          case "${{ github.ref_name }}" in
            master)
              echo "DEPLOY_PATH=apps/html-parser" >> $GITHUB_ENV
              ;;
            *)
              echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ç–∫–∞! –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å."
              exit 1
              ;;
          esac

          echo "DEPLOY_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: üõ† Deploy Backend
        run: |
          echo "üöÄ –î–µ–ø–ª–æ–π..."
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
            export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            export DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            export DEPLOY_TAG=${{ github.sha }}
            export DEPLOY_BRANCH=${GITHUB_REF##*/}

            cd $DEPLOY_PATH || { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ $DEPLOY_PATH"; exit 1; }

            git pull origin \$DEPLOY_BRANCH || { echo "‚ùå git pull –Ω–µ —É–¥–∞–ª—Å—è"; exit 1; }

            echo "\$DOCKERHUB_TOKEN" | docker login -u "\$DOCKERHUB_USERNAME" --password-stdin \
              || { echo "‚ùå Docker login failed"; exit 1; }

            docker pull \$DOCKERHUB_USERNAME/svs-parser-scheduler:\$DEPLOY_TAG \
              || { echo "‚ùå Docker pull failed"; exit 1; }

            if [ ! -f .env ]; then touch .env; fi
            grep -q "^TAG=" .env && sed -i "s/^TAG=.*/TAG=\$DEPLOY_TAG/" .env || echo "TAG=\$DEPLOY_TAG" >> .env
          EOF



      - name: üöÄ Start Backend
        run: |
          echo "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º backend..."
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << EOF
            cd $DEPLOY_PATH || exit 1

            docker compose -f docker-compose.yaml up scheduler -d --force-recreate && \
            echo "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω" || {
              echo "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
              exit 1
            }

            docker image prune -f > /dev/null
          EOF


  notify:
    name: üì¨ Telegram Notify
    runs-on: ubuntu-latest
    needs: [build-push, deploy]
    if: always()
    steps:
      - name: üì¨ Telegram Notification
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          REF_NAME="${{ github.ref_name }}"
          SHA="${{ github.sha }}"
          AUTHOR_USERNAME="${{ github.actor }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          DEPLOY_STATUS="${{ needs.deploy.result }}"

          if [ "$DEPLOY_STATUS" != "success" ]; then
            STATUS="üõë *–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è*"
            EXTRA_LINK="[üîç –û—Ç–∫—Ä—ã—Ç—å GitHub Actions]($RUN_URL)"
          else
            STATUS="‚úÖ –î–µ–ø–ª–æ–π *—É—Å–ø–µ—à–µ–Ω*"
            EXTRA_LINK=""
          fi

          CHAT_ID="${{ secrets.TELEGRAM_CHAT_ID }}"

          ESCAPED_COMMIT_MESSAGE=$(echo "$COMMIT_MESSAGE" | sed -E 's/([*_`\[\]()])/\\\1/g')
          TEXT="${STATUS}

          üì¶ *–í–µ—Ç–∫–∞:* \`$REF_NAME\`
          üîñ *–¢–µ–≥:* \`$SHA\`
          üë§ *–ê–≤—Ç–æ—Ä –¥–µ–ø–ª–æ—è:* [$AUTHOR_USERNAME](https://github.com/$AUTHOR_USERNAME)
          üìù *–ö–æ–º–º–∏—Ç:* $ESCAPED_COMMIT_MESSAGE${EXTRA_LINK}"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="$CHAT_ID" \
            -d parse_mode=Markdown \
            -d "text=$TEXT" || exit 1

