# utils/helpers.py

import os
import re
import time

from loguru import logger
from selenium import webdriver
from selenium.common.exceptions import (
    ElementClickInterceptedException,
    ElementNotInteractableException,
    StaleElementReferenceException,
)
from selenium.webdriver.common.by import By
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait


def clean_html(html):
    """
    –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ </div> –≤–Ω—É—Ç—Ä–∏ <td>, —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ–±–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.
    """
    cleaned_html = re.sub(r"</div>\s*</td>", "</td>", html, flags=re.IGNORECASE)
    return cleaned_html


def dump_debug(driver, name):
    with open(f"/tmp/{name}.html", "w", encoding="utf-8") as f:
        f.write(driver.page_source)
    driver.save_screenshot(f"/tmp/{name}.png")


def create_firefox_driver():
    logger.info("üöó –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Firefox –¥—Ä–∞–π–≤–µ—Ä–∞")
    try:
        os.environ["DISPLAY"] = ":99"  # –∫–ª—é—á –¥–ª—è Xvfb
        options = Options()
        options.add_argument("-headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")

        driver = webdriver.Firefox(options=options)
        logger.info("‚úÖ Firefox –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        return driver
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Firefox –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
        raise


def retry_on_stale(retries=5, delay=0.5):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for attempt in range(1, retries + 1):
                try:
                    return func(*args, **kwargs)
                except StaleElementReferenceException as e:
                    logger.warning(f"StaleElementReferenceException –≤ {func.__name__} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}): {e}")
                    time.sleep(delay)
                except Exception:
                    raise
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å {func.__name__} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫ –∏–∑-–∑–∞ StaleElementReferenceException")
            raise StaleElementReferenceException(f"{func.__name__} –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")

        return wrapper

    return decorator


def safe_click(driver, xpath, description="—ç–ª–µ–º–µ–Ω—Ç"):
    wait = WebDriverWait(driver, 20)
    for attempt in range(5):
        try:
            logger.info(f"üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ {description} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            element = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
            driver.execute_script(
                "arguments[0].scrollIntoView({block: 'center', inline: 'center'});",
                element,
            )
            element.click()
            return

        except (StaleElementReferenceException, ElementClickInterceptedException) as e:
            logger.warning(f"‚ö†Ô∏è {description} –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç, –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑: {e}")
            time.sleep(1)

        except ElementNotInteractableException as e:
            logger.warning(f"‚ö†Ô∏è {description} –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç), –ø—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ JS: {e}")
            try:
                driver.execute_script("arguments[0].click();", element)
                return
            except Exception as js_e:
                logger.error(f"‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ {description} –¥–∞–∂–µ —á–µ—Ä–µ–∑ JS: {js_e}")
                time.sleep(1)

    raise Exception(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ {description} –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫ (xpath: {xpath})")
